NOTE
  Depending upon the values of undefined register bits will make software
  dependent upon the unspecified manner in which the 80386 handles these
  bits. Depending upon undefined values risks making software incompatible
  with future processors that define usages for these bits. AVOID ANY
  SOFTWARE DEPENDENCE UPON THE STATE OF UNDEFINED 80386 REGISTER BITS.
────────────────────────────────────────────────────────────────────────────


Figure 1-1.  Example Data Structure

 GREATEST                 DATA STRUCTURE
 ADDRESS
  31              23              15              7             0 ──BIT
 ╔═══════════════╪═══════════════╪═══════════════╪═══════════════╗   OFFSET
 ║                                                               ║28
 ╠═══════════════╪═══════════════╪═══════════════╪═══════════════╣
 ║                                                               ║24
 ╠═══════════════╪═══════════════╪═══════════════╪═══════════════╣
 ║                                                               ║20
 ╠═══════════════╪═══════════════╪═══════════════╪═══════════════╣
 ║                                                               ║16
 ╠═══════════════╪═══════════════╪═══════════════╪═══════════════╣
 ║                                                               ║12
 ╠═══════════════╪═══════════════╪═══════════════╪═══════════════╣
 ║                                                               ║8
 ╠═══════════════╪═══════════════╪═══════════════╪═══════════════╣
 ║                           UNDEFINED                           ║4
 ╠═══════════════╪═══════════════╪═══════════════╪═══════════════╣  SMALLEST
 ║    BYTE 3          BYTE 2          BYTE 1          BYTE 0     ║0 ADDRESS
 ╚═══════════════╪═══════════════╪═══════════════╪═══════════════╝
                                                    BYTE OFFSET───┘


1.3.3  Instruction Operands

When instructions are represented symbolically, a subset of the 80386
Assembly Language is used. In this subset, an instruction has the following
format:

label: prefix mnemonic argument1, argument2, argument3

where:

  ■  A label is an identifier that is followed by a colon.

  ■  A prefix is an optional reserved name for one of the instruction
     prefixes.

  ■  A mnemonic is a reserved name for a class of instruction opcodes that
     have the same function.

  ■  The operands argument1, argument2, and argument3 are optional. There
     may be from zero to three operands, depending on the opcode.  When
     present, they take the form of either literals or identifiers for data
     items.  Operand identifiers are either reserved names of registers or
     are assumed to be assigned to data items declared in another part of
     the program (which may not be shown in the example). When two operands
     are present in an instruction that modifies data, the right operand is
     the source and the left operand is the destination.
